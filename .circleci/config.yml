version: 2
jobs:
  build:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules

  lint:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}     
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "examples/serverless-framework/aws/package.json" }}    
      - run: npm run lint

  unit_test:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}     
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "examples/serverless-framework/aws/package.json" }} 
      # @TODO: should probably use our own headless-chrome binary..
      - run: docker run -d --rm --name chrome-headless --shm-size 1024m -p 9222:9222 --cap-add SYS_ADMIN yukinying/chrome-headless
      - run: npm run ava

  build_lambda:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}
      - run: cd packages/lambda && npm install
      - save_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}
          paths:
            - packages/lambda/node_modules

  integration_test_lambda:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}
      - run:
          name: Integration test
          command: cd packages/lambda && npm test

  build_serverless_plugin:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - run: cd packages/serverless-plugin && npm install
      - run: cd packages/serverless-plugin/integration-test && npm install
      - save_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
          paths:
            - packages/serverless-plugin/node_modules
            - packages/serverless-plugin/integration-test/node_modules

  integration_test_serverless_plugin:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - run:
          name: Integration test
          command: cd packages/serverless-plugin && npm test

  build_serverless_example:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "examples/serverless-framework/aws/package.json" }}
      - run: cd examples/serverless-framework/aws && npm install
      - save_cache:
          key: dependency-cache-{{ checksum "examples/serverless-framework/aws/package.json" }}
          paths:
            - examples/serverless-framework/aws/node_modules      

  build_lambda_chromium:
    machine: true
    resource_class: xlarge
    branch:
      - develop # @TODO remove
      - master
    steps:
      - checkout
      - restore_cache:
          key: build-cache-{{ checksum "packages/lambda/builds/chromium/version.json" }}      
      - run: 
          name: Build headless Chromium for AWS Lambda
          command: packages/lambda/scripts/build-binaries.sh chromium
          no_output_timeout: 6h
      - save_cache:
          key: build-cache-{{ checksum "packages/lambda/builds/chromium/version.json" }}
          paths:
            - packages/lambda/builds/chromium/version.json
            - packages/lambda/builds/chromium/build             

  update_browser_versions:
    docker:
      - image: circleci/node:6.10.3
    branch:
      - develop # @TODO remove
      # - master
    steps:
      - checkout
      - run: scripts/update-browser-versions.sh

workflows:
  version: 2
  build_test:
    jobs:
      - build
      - build_lambda
      - build_serverless_plugin
      - build_serverless_example

      - lint:
          requires:
            - build  
            - build_lambda
            - build_serverless_plugin
            - build_serverless_example
      - unit_test:
          requires:
            - build
            - build_lambda
            - build_serverless_plugin
            - build_serverless_example

      - integration_test_lambda:
          requires:
            - build_lambda

      - integration_test_serverless_plugin:
          requires:
            - build_serverless_plugin
  release:
    jobs:
      - build_lambda_chromium

  browsers_up_to_date:
     triggers:
       - schedule:
           cron: "0 * * * *"
           filters:
             branches:
               only:
                 # - master
                 - develop
    jobs:
      - update_browser_versions
