version: 2
jobs:
  build:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules

  lint:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}     
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "examples/serverless-framework/aws/package.json" }}    
      - run: npm run lint

  unit_test:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}     
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "examples/serverless-framework/aws/package.json" }} 
      - run: |
          docker run -d --rm \
            --name headless-chromium \
            -p 9222:9222 \
            "adieuadieu/headless-chromium-for-aws-lambda:$VERSION" # @TODO $VERSION is not set
      - run: npm run ava

  build_lambda:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}
      - run: cd packages/lambda && npm install
      - save_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}
          paths:
            - packages/lambda/node_modules

  integration_test_lambda:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}
      - run:
          name: Integration test
          command: cd packages/lambda && npm test

  build_serverless_plugin:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - run: cd packages/serverless-plugin && npm install
      - run: cd packages/serverless-plugin/integration-test && npm install
      - save_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
          paths:
            - packages/serverless-plugin/node_modules
            - packages/serverless-plugin/integration-test/node_modules

  integration_test_serverless_plugin:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - run:
          name: Integration test
          command: cd packages/serverless-plugin && npm test

  build_serverless_example:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "examples/serverless-framework/aws/package.json" }}
      - run: cd examples/serverless-framework/aws && npm install
      - save_cache:
          key: dependency-cache-{{ checksum "examples/serverless-framework/aws/package.json" }}
          paths:
            - examples/serverless-framework/aws/node_modules      






  # build_lambda_chromium:
  #   machine: true
  #   resource_class: xlarge
  #   branch:
  #     - develop # @TODO remove
  #     - master
  #   steps:
  #     - checkout  
  #     - restore_cache:
  #         key: build-cache-{{ checksum "packages/lambda/builds/chromium/version.json" }}      
  #     - run: 
  #         name: Build headless Chromium for AWS Lambda
  #         command: packages/lambda/scripts/build-binaries.sh chromium
  #         no_output_timeout: 6h
  #     - save_cache:
  #         key: build-cache-{{ checksum "packages/lambda/builds/chromium/version.json" }}
  #         paths:
  #           - packages/lambda/builds/chromium/version.json
  #           - packages/lambda/builds/chromium/dist             

  update_browser_versions:
    docker:
      - image: circleci/node:6.10.3
    branch:
      - develop # @TODO remove
      # - master
    steps:
      - checkout
      - run: scripts/update-browser-versions.sh

  release:
    docker:
      - image: circleci/node:6.10.3
    branch:
      - develop # @TODO remove
      - master
    steps:
      - checkout
      - restore_cache:
          key: build-cache-{{ checksum "packages/lambda/builds/chromium/version.json" }}
      - run: scripts/release.sh

  build_new_binaries:
    docker:
      - image: amazonlinux:latest
    branch:
      - develop # @TODO remove
      - master
    steps:
      - checkout
      # Would be cooler if these dependencies were already apart of the docker image
      - run:
          name: Install AWS CLI & JQ
          command: yum install -y aws-cli jq
      # - run:
      #     name: Enable experimental features in Docker daemon
      #     command: |
      #       sudo sh -c 'echo '\''DOCKER_OPTS="--experimental=true"'\'' >> /etc/default/docker'
      #       sudo service docker restart
      - run: 
          name: Build stable-channel Chromium
          command: scripts/ci-daily.sh stable chromium
      - run: 
          name: Build beta-channel Chromium
          command: scripts/ci-daily.sh beta chromium
      - run: 
          name: Build dev-channel Chromium
          command: scripts/ci-daily.sh dev chromium


#
# Workflows
#

workflows:
  version: 2
  build_test:
    jobs:
      - build
      - build_lambda
      - build_serverless_plugin
      - build_serverless_example

      - lint:
          requires:
            - build  
            - build_lambda
            - build_serverless_plugin
            - build_serverless_example
      - unit_test:
          requires:
            - build
            - build_lambda
            - build_serverless_plugin
            - build_serverless_example
      # - build_lambda_chromium:
      #     filters:
      #       branches:
      #         only:
      #           - develop # @TODO remove
      #           - master
      - integration_test_lambda:
          requires:
            - build_lambda
            # - build_lambda_chromium
      - integration_test_serverless_plugin:
          requires:
            - build_serverless_plugin
            # - build_lambda_chromium

  release:
    jobs:            
      - release:
          filters:
            tags:
              # semver https://github.com/sindresorhus/semver-regex/blob/master/index.js
              only: /^\bv?(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)(?:-[\da-z\-]+(?:\.[\da-z\-]+)*)?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?\b/ig
            branches:
              ignore: develop # /.*/ # @TODO: remove 'develop'


  daily_build:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                # - @TODO: master (instead of develop)
                - develop
    jobs:
      - build_new_binaries

  daily_version_update:
    triggers:
      - schedule:
          cron: "3 * * * *" # * 14
          filters:
            branches:
              only:
                # - @TODO: master (instead of develop)
                - develop
    jobs:
      - update_browser_versions
