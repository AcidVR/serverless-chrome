version: 2
jobs:
  build:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - node_modules

  lint:
    docker:
      - image: circleci/node:8
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "examples/serverless-framework/aws/package.json" }}
      - restore_cache:
          key: build-cache-{{ .Revision }}-package-lambda
      # need to set permissions on the npm prefix so that we can npm link packages
      - run: sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}
      - run: ./scripts/link-package.sh serverless-plugin lambda               
      - run: npm run lint

  unit_test:
    docker:
      - image: circleci/node:8
      - image: adieuadieu/headless-chromium-for-aws-lambda:stable
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}     
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "examples/serverless-framework/aws/package.json" }}
      - run: |
            sudo apt-get install -y chromium-browser google-chrome-stable
      # - run: |
      #     VERSION=$(jq -r ".stable" packages/lambda/builds/chromium/version.json)
      #     docker run -d --rm \
      #       --name headless-chromium \
      #       -p 9222:9222 \
      #       "adieuadieu/headless-chromium-for-aws-lambda:stable"
      - run: npm run ava

  build_lambda:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}      
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}
      - run:
          name: Add chromium binary if missing
          command: |
            cd packages/lambda
            if [ ! -f "dist/headless-chromium" ]; then
              ./scripts/package-binaries.sh chromium stable
              cp dist/stable-headless-chromium dist/headless-chromium
            fi
      - run: cd packages/lambda && npm install
      - save_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}
          paths:
            - packages/lambda/node_modules
            - packages/lambda/dist/headless-chromium
            - packages/lambda/dist/stable-headless-chromium
      - run: cd packages/lambda && npm run build
      - save_cache:
          key: build-cache-{{ .Revision }}-package-lambda
          paths:
            - packages/lambda/dist  

  integration_test_lambda:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}      
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}
      - restore_cache:
          key: build-cache-{{ .Revision }}-package-lambda               
      - run:
          name: Integration test
          command: cd packages/lambda && npm test

  build_serverless_plugin:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}      
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - restore_cache:
          key: build-cache-{{ .Revision }}-package-lambda
      # need to set permissions on the npm prefix so that we can npm link packages
      - run: sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}
      - run: ./scripts/link-package.sh serverless-plugin lambda
      - run: cd packages/serverless-plugin && npm install
      - run: |
          [ -z "$CIRCLE_TAG" ] || ./scripts/link-package.sh serverless-plugin/integration-test lambda
      - run: cd packages/serverless-plugin/integration-test && npm install
      - save_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
          paths:
            - packages/serverless-plugin/node_modules
            - packages/serverless-plugin/integration-test/node_modules

  integration_test_serverless_plugin:
    machine: true
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}      
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - restore_cache:
          key: build-cache-{{ .Revision }}-package-lambda
      - run:
          name: Integration test
          command: cd packages/serverless-plugin && npm test

  build_serverless_example:
    docker:
      - image: circleci/node:6.10.3
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}      
      - restore_cache:
          key: dependency-cache-{{ checksum "examples/serverless-framework/aws/package.json" }}
      - run: cd examples/serverless-framework/aws && npm install
      - save_cache:
          key: dependency-cache-{{ checksum "examples/serverless-framework/aws/package.json" }}
          paths:
            - examples/serverless-framework/aws/node_modules      

  update_browser_versions:
    docker:
      - image: circleci/node:6.10.3
    branch:
      - develop # @TODO remove
      # - master
    steps:
      - checkout
      - run: scripts/update-browser-versions.sh

  release:
    machine: true
    # docker:
    #   - image: circleci/node:6.10.3
    branch:
      - develop # @TODO remove
      - master
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/lambda/package.json" }}
      - restore_cache:
          key: dependency-cache-{{ checksum "packages/serverless-plugin/package.json" }}-{{ checksum "packages/serverless-plugin/integration-test/package.json" }}
      - run: scripts/release.sh

  build_new_binaries:
    docker:
      - image: amazonlinux:latest
    branch:
      - develop # @TODO remove
      - master
    steps:
      - checkout
      # Would be cooler if these dependencies were already apart of the docker image
      - run:
          name: Install AWS CLI & JQ
          command: yum install -y aws-cli jq
      # - run:
      #     name: Enable experimental features in Docker daemon
      #     command: |
      #       sudo sh -c 'echo '\''DOCKER_OPTS="--experimental=true"'\'' >> /etc/default/docker'
      #       sudo service docker restart
      - run: 
          name: Build stable-channel Chromium
          command: scripts/ci-daily.sh stable chromium
      - run: 
          name: Build beta-channel Chromium
          command: scripts/ci-daily.sh beta chromium
      - run: 
          name: Build dev-channel Chromium
          command: scripts/ci-daily.sh dev chromium


#
# Workflows
#

workflows:
  version: 2
  build_test_release:
    jobs:
      - build

      - build_lambda:
          requires:
            - build
      - build_serverless_plugin:
          requires:
            - build_lambda
      - build_serverless_example:
          requires:
            - build_serverless_plugin
      - lint:
          requires:
            - build
            - build_lambda
            - build_serverless_plugin
            - build_serverless_example
      - unit_test:
          requires:
            - build
            - build_lambda
            - build_serverless_plugin
            - build_serverless_example
      - integration_test_lambda:
          requires:
            - build_lambda
      - integration_test_serverless_plugin:
          requires:
            - build_serverless_plugin
      - release:
          filters:
            tags:
              # semver https://github.com/sindresorhus/semver-regex/blob/master/index.js
              only: /^\bv?(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)\.(?:0|[1-9]\d*)(?:-[\da-z\-]+(?:\.[\da-z\-]+)*)?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?\b/ig
            branches:
              only: develop # @TODO: change to 'master'
          requires:
            - lint
            - unit_test
            - integration_test_lambda
            - integration_test_serverless_plugin


  daily_build:
    triggers:
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                # - @TODO: master (instead of develop)
                - develop
    jobs:
      - build_new_binaries

  daily_version_update:
    triggers:
      - schedule:
          cron: "0 14 * * *" # 0 14
          filters:
            branches:
              only:
                # - @TODO: master (instead of develop)
                - develop
    jobs:
      - update_browser_versions
